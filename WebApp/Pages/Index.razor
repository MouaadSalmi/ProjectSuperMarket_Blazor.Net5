@page "/"
@inject IViewProduct ViewProducts
@inject ISelectByIdCategory SelectCategoryById

<div class="position-relative overflow-hidden p-3 p-md-5 m-md-3 text-center bg-light">
    <div class="col-md-5 p-lg-5 mx-auto my-5">
        <h1 class="display-4 fw-normal">Supermarket Management System</h1>
        <div class="lead fw-normal">Technologies Utilisées: <b>ASP.NET Core Blazor (.Net5)</b> (server side), <b>Entity Framework Core v5.0.12</b>, <b>SQL Server SGBD</b>,<b>Clean Architecture <b>, </b> Repository Design Pattern</b> and <b>ASP.NET Core Identity</b> for Authentication and Authorization as well.</div>
    </div>
    <div class="product-device shadow-sm d-none d-md-block"></div>
    <div class="product-device product-device-2 shadow-sm d-none d-md-block"></div>
</div>

<div class="container">
    <h3>Products List</h3>
    <br />
    @if (products != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Product Category</th>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@SelectCategoryById.Execute(product.CategoryId.Value)?.Name</td>
                        <td>@product.Name</td>
                        <td>@(Math.Round(product.Price.Value, 2))</td>
                        <td>@product.Quantity</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    private IEnumerable<Product> products;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        products = ViewProducts.Execute();
    }

}