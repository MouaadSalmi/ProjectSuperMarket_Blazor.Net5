@page "/categories"
@attribute [Authorize(Policy = "AdminOnly")]

@inject IViewCategory ViewCategories
@inject IDeleteCategory DeleteCategory
@inject NavigationManager NavigationManager

<h3>Manage Categories</h3>

@if (categories != null)
{

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Options</th>
            </tr>
        </thead>
        @foreach (var category in categories)
        {
            <tbody>
                <tr>
                    <td>@category.Name</td>
                    <td>@category.Description</td>
                    <td>
                        <button type="button" @onclick="@(() =>OnClikcUpdateCategory(category))" class="btn btn-link">Edit</button>
                        <button type="button" @onclick="@(() =>OnDeleteCategory(category.CategoryId))" class="btn btn-link">Delete</button>
                    </td>

                </tr>
            </tbody>
        }
    </table>
}
<br />
<button type="button" @onclick="OnClickAddCategory" class="btn btn-primary">Add Category</button>

@code {
    private List<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadCategories();
    }

    private void OnClickAddCategory()
    {
        NavigationManager.NavigateTo("/addcategory");
    }
    private void OnClikcUpdateCategory(Category category)
    {
        NavigationManager.NavigateTo($"/updatecategory/{category.CategoryId}");
    }
    private void OnDeleteCategory(int id)
    {
        DeleteCategory.execute(id);
        LoadCategories();
    }
    private void LoadCategories()
    {
        categories = ViewCategories.Execute().ToList();
    }
}
